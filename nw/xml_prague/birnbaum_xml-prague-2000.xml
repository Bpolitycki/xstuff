<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="balisage-proceedings-html.xsl"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0"
    xml:lang="en">
    <title>Sequence alignment in XSLT 3.0</title>
    <info>
        <author>
            <personname>
                <firstname>David</firstname>
                <othername>J.</othername>
                <surname>Birnbaum</surname>
            </personname>
            <personblurb>
                <para>David J. Birnbaum is Professor of Slavic Languages and Literatures at the
                    University of Pittsburgh. He has been involved in the study of electronic text
                    technology since the mid-1980s, has delivered presentations at a variety of
                    electronic text technology conferences, and has served on the board of the
                    Association for Computers and the Humanities, the editorial board of
                        <citetitle>Markup languages: theory and practice</citetitle>, the advisory
                    board of <emphasis>Balisage: the markup conference</emphasis>, and the Text
                    Encoding Initiative Technical Council. Much of his electronic text work
                    intersects with his research in medieval Slavic manuscript studies, but he also
                    often writes about issues in the philosophy of markup.</para>
            </personblurb>
            <affiliation>
                <jobtitle>Professor</jobtitle>
                <orgname>Department of Slavic Languages and Literatures, University of Pittsburgh
                    (US)</orgname>
            </affiliation>
            <email>djbpitt@gmail.com</email>
            <uri>http://www.obdurodon.org</uri>
        </author>
        <keywordset>
            <keyword>sequence alignment</keyword>
            <keyword>xslt</keyword>
        </keywordset>
        <abstract>
            <para>The Needleman Wunsch algorithm, which this year celebrates its quinquagenary
                anniversary, has been proven to produce an optimal global pairwise sequence
                alignment. Because this dynamic programming algorithm requires the progressive
                updating of mutually dependent variables, it poses challenges for functional
                programming paradigms like the one underlying XSLT. The present report explores
                these challenges and provides an implementation of the Needleman Wunsch algorithm in
                XSLT 3.0.</para>
        </abstract>
    </info>
    <section>
        <title>Introduction</title>
        <section>
            <title>Why sequence aligment matters</title>
            <para>Sequence alignment is a way of identifying and modeling similarities and
                differences in sequences of items, and has proven insightful and productive for
                research in both the natural sciences (especially in biology and medicine, where it
                is applied to genetic sequences) and the humanities (especially in text-critical
                scholarship, where it is applied to sequences of words in variant versions of a
                text). In textual scholarship, which is the domain in which the present report was
                developed, sequence alignment assists the philologist in identifying locations where
                manuscript witnesses agree and where they disagree.<footnote>
                    <para><emphasis>Witness</emphasis>, sometimes expanded as <emphasis>manuscript
                            witness</emphasis>, is a technical term in text-critical scholarship for
                        a manuscript that provides evidence of the history of a text.</para>
                </footnote> These agreements and disagreements, in turn, provide evidence about
                probable (or, at least, candidate) moments of shared transmission among textual
                witnesses, and thus serve as evidence to construct and support a philological
                argument about the history of a text.<footnote>
                    <para>For an introduction to the evaluation of shared and divergent readings as
                        a component of textual criticism see <xref linkend="trovato_2014"/>.</para>
                </footnote></para>
        </section>
        <section>
            <title>Biological and textual alignment</title>
            <para>Insofar as biomedical research enjoys a larger scientific community and richer
                funding resources than textual humanities scholarship, it is not surprising that the
                literature about sequence alignment, and the science reported in that literature, is
                quantitatively greater in the natural sciences than in the humanities. Furthermore,
                insofar as all sequence alignment is similar in certain mathematical ways, it is
                both necessary and appropriate for textual scholars to seek opportunities to adapt
                biomedical methods for their own purposes. For those reasons, the present report,
                although motivated by text-critical research, focuses on a method first proposed in
                a biological context and later also applied in philology.</para>
            <para>This report does not take account of differences in the size and scale of
                biological and philological data, but it is nonetheless the case that alignment
                tasks in biomedical contexts, on the one hand, and in textual contexts, on the
                other, typically differ at least in the following ways: <itemizedlist>
                    <listitem>
                        <para>Genetic alignment may operate at sequence lengths involving entire
                            chromosomes or entire genomes, which are orders of magnitude larger than
                            the largest real-world textual alignment tasks.</para>
                    </listitem>
                    <listitem>
                        <para>Genetic alignment operates with a vocabulary of four words (nucleotide
                            bases, although alignment may also be performed on codons), while
                            textual alignment often involves a vocabulary of hundreds or thousands
                            of different words.</para>
                    </listitem>
                </itemizedlist></para>
            <para>The preceding systematic differences in size and scale invite questions about
                whether the different shape of the source data in the two domains might invite
                different methods. Especially in the case of heuristic approaches that are not
                guaranteed to produce an optimal solution, is it possible that compromises required
                to make data at large scale computationally tractable might profitably be avoided in
                domains involving data at a substantially smaller scale? Although the present report
                does not engage with this question, it remains part of the context within which
                solutions to alignment tasks in different disciplines ultimately should be
                assessed.</para>
        </section>
        <section>
            <title>Global pairwise alignment</title>
            <para>The following two distinctions—not between biological and textual alignment, but
                within both domains—are also relevant to the present report:<itemizedlist>
                    <listitem>
                        <para>Both genetic and textual alignment tasks can be divided into
                                <emphasis>global</emphasis> and <emphasis>local</emphasis>
                            alignment. The goal of global alignment is to find the best alignment of
                                <emphasis>all items in the entire sequences</emphasis>. In textual
                            scholarship this is often called <emphasis>collation</emphasis> (cf.
                            e.g., <xref linkend="fv_reader"/>). The goal of local alignment is to
                            find moments where <emphasis>subsequences</emphasis> correspond, without
                            attempting to optimize the alignment of the entire sequences. A common
                            textological application of local alignment is <emphasis>text
                                reuse</emphasis>, e.g., finding moments where Dante quotes or
                            paraphrases Ovid (cf. <xref linkend="peteghhem_2015"/>, <xref
                                linkend="intertextual_dante"/>).</para>
                    </listitem>
                    <listitem>
                        <para>Both genetic and textual alignment tasks may involve
                                <emphasis>pairwise alignment</emphasis> or <emphasis>multiple
                                alignment</emphasis>. Pairwise alignment refers to the alignment of
                            two sequences; multiple alignment refers to the alignment of more than
                            two sequences. In textual scholarship multiple alignment is often called
                                <emphasis>multiple-witness alignment</emphasis>.</para>
                    </listitem>
                </itemizedlist></para>
            <para>The Needleman Wunsch algorithm described and implemented below has been proven to
                identify all optimal global pairwise alignments of two sequences, and it is
                especially well suited to alignment tasks where the two texts are of comparable size
                and are substantially similar to each other. The present report does not address
                either local alignment or multiple (witness) alignment.</para>
        </section>
        <section>
            <title>Overview of this report</title>
            <para>This report begins by introducing the use of dynamic programming methods in the
                Needleman Wunsch algorithm to ascertaain all optimal global alignments of two
                sequences. It then identifies challenges to implementing this algorithm in XSLT and
                discusses those challenges in the context of developing such an implementation.
                Original code discussed in this report is available at <link
                    xl:href="https://github.com/djbpitt/xstuff/tree/master/nw"/>.</para>
            <para>It should be noted that the goal of this report, and the code underlying it, is to
                explore global pairwise sequence alignment in an XSLT environment. For that reason,
                it is not intended that this code function as a stand-alone end-user textual
                collation tool. There are two reasons for specifying the goals and non-goals of the
                present report in this way: <itemizedlist>
                    <listitem>
                        <para>Textual collation as a philological method involves more than just
                            alignment. For example, the Gothenburg model of textual collation, which
                            has been implemented in the CollateX [<xref linkend="collatex"/>] and
                            Juxta [<xref linkend="juxta"/>] tools, expresses the collation process
                            as a five-step pipeline, within which alignment serves as the third
                            step. [<xref linkend="gothenburg"/>]</para>
                    </listitem>
                    <listitem>
                        <para>Real-world textual alignment tasks often involve more than two
                            witnesses, that is, they involve multiple-witness, rather than pairwise,
                            alignment. While some approaches to multiple-witness alignment are
                            implemented as a progressive or iterative application of pairwise
                            alignment, these methods are subject to order effects. Ultimately,
                            multiple-witness alignment is an NP hard problem with which the present
                            report does not seek to engage.<footnote>
                                <para><xref linkend="msa"/> provides an overview of multiple
                                    sequence alignment, the term in bioinformatics for what
                                    philologists refer to as multiple-witness alignment.</para>
                            </footnote></para>
                    </listitem>
                </itemizedlist></para>
        </section>
    </section>
    <section>
        <title>About sequence alignment</title>
        <section>
            <title>Alignment and scoring</title>
            <para>An optimal alignment can be defined as an alignment that yields the best
                    <emphasis>score</emphasis>, where the researcher is responsible for identifying
                an appropriate <emphasis>scoring method</emphasis>. Relationships involving
                individual aligned items from a sequence can be categorized as belonging to three
                possible types for scoring purposes:<itemizedlist>
                    <listitem>
                        <para>Items from both sequences are aligned and are the same. This is called
                            a <emphasis>match</emphasis>. If the two entire sequences are identical,
                            all item-level alignments are matches.</para>
                    </listitem>
                    <listitem>
                        <para>Items from both sequences are aligned but are different. This is
                            called a <emphasis>mismatch</emphasis>. Mismatches may arise in
                            situations where they are sandwiched between matches. For example, given
                            the input sequences <quote>The brown koala</quote> and <quote>The gray
                                koala</quote>, after aligning the words <quote>The</quote> and
                                <quote>koala</quote> in the two sequences (both alignments are
                            matches), the color words sandwiched between them form an aligned
                            mismatch.</para>
                    </listitem>
                    <listitem>
                        <para>An item in one sequence has no corresponding item in the other
                            sequence. This is called a <emphasis>gap</emphasis> or an
                                <emphasis>indel</emphasis> (a correspondence of an item in one
                            sequence to no item in the other, which can be interpreted as either an
                                <emphasis>in</emphasis>sertion in one sequence or a
                                <emphasis>del</emphasis>etion from the other). Gaps are inevitable
                            where the sequences are of different lengths, so that, for example.
                            given <quote>The gray koala</quote> and <quote>The koala</quote>, the
                            item <quote>gray</quote> in the first sequence corresponds to a gap in
                            the second. Gaps may also occur with sequences of the same length; for
                            example, if we align <quote>The brown koala lives in Australia</quote>
                            with <quote>The koala lives in South Australia</quote>, both sequences
                            contain six words, but the most natural alignment, with a length of
                            seven items and one gap in each sequence, is: <table>
                                <title>Alignment example with gaps</title>
                                <tgroup cols="7">
                                    <tbody>
                                        <row>
                                            <entry>The</entry>
                                            <entry>brown</entry>
                                            <entry>koala</entry>
                                            <entry>lives</entry>
                                            <entry>in</entry>
                                            <entry> </entry>
                                            <entry>Australia</entry>
                                        </row>
                                        <row>
                                            <entry>The</entry>
                                            <entry> </entry>
                                            <entry>koala</entry>
                                            <entry>lives</entry>
                                            <entry>in</entry>
                                            <entry>South</entry>
                                            <entry>Australia</entry>
                                        </row>
                                    </tbody>
                                </tgroup>
                            </table>
                        </para>
                    </listitem>
                </itemizedlist></para>
            <para>A common scoring method is to assign a value of <tag class="attvalue">1</tag> to
                matches, <tag class="attvalue">-1</tag> to mismatches, and <tag class="attvalue"
                    >-1</tag> to gaps. These values prefer alignments with as many matches as
                possible, and with as few mismatches and gaps as possible. But alternative scoring
                methods might, for example, assign a greater penalty to gaps than to mismatches, or
                might assign different penalties to new gaps than to continuations of existing gaps
                (this is called an <emphasis>affine</emphasis> gap penalty).</para>
            <para>The scoring method determines what will be identified as an optimal alignment for
                a circular reason: optimal in this context is defined as the alignment with the best
                score. This means that the selection of an appropriate scoring method during
                philological alignment should reflect the researcher’s theory of the types of
                correspondences and non-correspondences that are meaningful for identifying textual
                moments to be compared. In the examples below we have assigned a score of <tag
                    class="attvalue">1</tag> for matches, <tag class="attvalue">-1</tag> for
                mistmatches, and <tag class="attvalue">-2</tag> for gaps. This scoring system
                prefers mismatches to gaps, and scores gaps in a linear (not affine) way.</para>
        </section>
        <section>
            <title>Sequence alignment algorithms</title>
            <para>A naïve, brute-force approach to sequence alignment would construct all possible
                alignments, score them, and select the ones with the best scores. This method has
                exponential complexity, which makes it unrealistic even for relatively small
                real-world alignment tasks. [<xref linkend="bellman_1954"/> 2] Alternatives must
                therefore reduce the computational complexity, ideally by reducing the search space
                to exclude from consideration in advance all alignments that
                    <emphasis>cannot</emphasis> be optimal. Where this is not possible, a
                    <emphasis>heuristic</emphasis> method excludes from consideration in advance
                alignments that <emphasis>are unlikely</emphasis> to be optimal. Heuristic methods
                entail a risk of inadvertently excluding an optimal alignment, but in the case of
                some computationally complex problems, a heuristic approach may be the only
                realistic way of reducing the complexity sufficiently to make the problem
                tractable.</para>
            <para>In the case of global pairwise alignment, the Needleman Wunsch algorithm,
                described below, has been proven always to produce an optimal alignment, according
                to whatever definition of optimal the chosen scoring method instantiates. Needleman
                Wunsch is an implementation of <emphasis>dynamic programming</emphasis>, and in the
                following two sections we first describe dynamic programming as a paradigm and then
                explain how it is employed in the Needleman Wunsch algorithm. These explanations are
                preparatory to exploring the complications that dynamic programming, both in general
                and in the context of Needleman Wunsch, pose for XSLT and how they can be
                resolved.</para>
        </section>
    </section>
    <section>
        <title>Dynamic programming and the Needleman Wunsch algorithm</title>
        <section>
            <title>Dynamic programming</title>
            <para>Dynamic programming, a paradigm developed by Richard Bellman at the Rand
                Corporation in the early 1950s, makes it possible to express complex coding tasks as
                a combination of smaller, more tractable, overlapping ones.<footnote>
                    <para>For more information about dynamic programming see <xref
                            linkend="bellman_1952"/> and <xref linkend="bellman_1954"/>.</para>
                </footnote> A commonly cited example of a task that is amenable to dynamic
                programming is the computation of a Fibonacci number. Insofar as every Fibonacci
                number beyond the first two can be expressed as a function of the two immediately
                preceding Fibonacci numbers, a naïve top-down approach to computing the value of the
                    <emphasis>nth</emphasis> Fibonacci number would start with
                    <emphasis>n</emphasis> and compute the two preceding values. This requires
                computing all of their preceding values, which requires computing their preceding
                values, etc., which ultimately leads to computing the same values repeatedly. A
                dynamic bottom-up computation, on the other hand, would calculate each smaller
                number only once and then use those values to move up to larger numbers.<footnote>
                    <para>The implementation of dynamic programming according to a bottom-up
                        organization is called <emphasis>tabulation</emphasis>. A top-down dynamic
                        approach would perform all of the recursive computation at the beginning,
                        but <emphasis>memoize</emphasis> (that is, store and index) the
                        sub-calculations, so that they could be looked up and reused, without having
                        to be recomputed, when needed at lower levels.</para>
                </footnote></para>
            <para>Sequence alignment meets the two requirements for a problem to be amenable to
                dynamic programming.[<xref linkend="grimson"/>] First, it satisfies
                    <emphasis>optimal substructure</emphasis>, which means that an optimal solution
                to a problem can be reached by determining optimal solutions to its subproblems.
                Second, it satisfies <emphasis>overlapping subproblems</emphasis>, where
                    <emphasis>overlapping</emphasis> means <quote>common</quote> or
                    <quote>shared</quote>, that is, that the same subproblems recur repeatedly. In
                the Fibonacci example above, the computation of a higher Fibonacci number depends on
                the computation of the two preceding numbers (optimal substructure), and the same
                preceding numbers are used repeatedly in a top-down solution (overlapping
                subproblems). In the case of pairwise sequence alignment, the Needleman Wunsch
                algorithm, discussed below, observes both optimal substructure (an optimal alignment
                is found by finding optimal alignments of subsequences) and overlapping subproblems
                (the same properties of these subsequences are reused to solve multiple
                subproblems).</para>
        </section>
        <section>
            <title>The Needleman Wunsch algorithm</title>
            <para>The history of the Needleman Wunsch algorithm is described by Boes as
                follows:</para>
            <blockquote>
                <para>We will begin with the scoring system most commonly used when introducing the
                    Needleman-Wunsch algorithm: substitution scores for matched residues and linear
                    gap penalties. Although Needleman and Wunsch already discussed this scoring
                    system in their 1970 article [NW70], the form in which it is now most commonly
                    presented is due to Gotoh [Got82] (who is also responsible for the affine gap
                    penalties version of the algorithm). An alignment algorithm very similar to
                    Needleman-Wunsch, but developed for speech recognition, was also independently
                    described by Vintsyuk in 1968 [Vin68]. Another early author interested in the
                    subject is Sellers [Sel74], who described in 1974 an alignment algorithm
                    minimizing sequence distance rather than maximizing sequence similarity; however
                    Smith and Waterman (two authors famous for the algorithm bearing their name)
                    proved in 1981 that both procedures are equivalent [SWF81]. Therefore it is
                    clear that there are many classic papers, often a bit old, describing
                    Needleman-Wunsch and its variants using different mathematical notations. (<xref
                        linkend="boes_2014"/> 14; pointers are to <xref linkend="needleman_1970"/>,
                        <xref linkend="gotoh_1982"/>, <xref linkend="vintsyuk_1968"/>, <xref
                        linkend="sellers_1974"/>, and <xref linkend="smith_1981"/>)</para>
            </blockquote>
            <para>Boes further explains that Needleman Wunsch <quote>is an
                        <emphasis>optimal</emphasis> algorithm, which means that it produces the
                    best possible solution with respect to the chosen scoring system. There [exist]
                    also non-optimal alignment algorithms, most notably the heuristic methods
                    …</quote> [<xref linkend="boes_2014"/> 13] <quote>Non-optimal</quote> here means
                not that the method is <emphasis>incapable</emphasis> of arriving at an optimal
                solution, but that it is <emphasis>not guaranteed</emphasis> to do so.</para>
            <para>Performing alignment according to the Needleman Wunsch dynamic programming
                algorithm entails the following steps:<footnote>
                    <para>For a clear and more detailed explanation see <xref linkend="snip"
                        />.</para>
                </footnote>
                <orderedlist>
                    <listitem>
                        <para>Construct a grid with one of the sequences to be aligned along the
                            top, labeling the columns, and the other along the left, labeling the
                            rows.</para>
                    </listitem>
                    <listitem>
                        <para>Determine a scoring system. Here we score matches as <tag
                                class="attvalue">1</tag>, mismatches as <tag class="attvalue"
                                >-1</tag>, and gaps as <tag class="attvalue">-2</tag>.</para>
                    </listitem>
                    <listitem>
                        <para>Insert a row at the top, below the labels, with sequential numbers
                            reflecting multiples of the gap score. For example, if the gap score
                            value is <tag class="attvalue">-2</tag>, the values would be <tag
                                class="attvalue">0</tag>, <tag class="attvalue">-2</tag>, <tag
                                class="attvalue">-4</tag>, etc. Starting from the <tag
                                class="attvalue">0</tag>, assign similar values to a column inserted
                            on the left, after the row labels. By this point the grid should look like:<table>
                                <title>Initial grid for Needleman Wunsch</title>
                                <tgroup cols="7">
                                    <tbody>
                                        <row>
                                            <entry/>
                                            <entry/>
                                            <entry align="center">k</entry>
                                            <entry align="center">o</entry>
                                            <entry align="center">a</entry>
                                            <entry align="center">l</entry>
                                            <entry align="center">a</entry>
                                        </row>
                                        <row>
                                            <entry/>
                                            <entry align="right">0</entry>
                                            <entry align="right">-2</entry>
                                            <entry align="right">-4</entry>
                                            <entry align="right">-6</entry>
                                            <entry align="right">-8</entry>
                                            <entry align="right">-10</entry>
                                        </row>
                                        <row>
                                            <entry>c</entry>
                                            <entry align="right">-2</entry>
                                            <entry/>
                                            <entry/>
                                            <entry/>
                                            <entry/>
                                            <entry/>
                                        </row>
                                        <row>
                                            <entry>o</entry>
                                            <entry align="right">-4</entry>
                                            <entry/>
                                            <entry/>
                                            <entry/>
                                            <entry/>
                                            <entry/>
                                        </row>
                                        <row>
                                            <entry>l</entry>
                                            <entry align="right">-6</entry>
                                            <entry/>
                                            <entry/>
                                            <entry/>
                                            <entry/>
                                            <entry/>
                                        </row>
                                        <row>
                                            <entry>a</entry>
                                            <entry align="right">-8</entry>
                                            <entry/>
                                            <entry/>
                                            <entry/>
                                            <entry/>
                                            <entry/>
                                        </row>
                                    </tbody>
                                </tgroup>
                            </table></para>
                    </listitem>
                    <listitem>
                        <para>Starting in the upper left of the table body, where the first items of
                            the two sequences intersect, and proceeding across each row in turn,
                            from top to bottom, write a value into each cell. That value should be
                            the highest of the following three candidate values:<itemizedlist>
                                <listitem>
                                    <para>The value in the cell immediately above plus the gap
                                        score.</para>
                                </listitem>
                                <listitem>
                                    <para>The value in the cell immediately to the left plus the gap
                                        score.</para>
                                </listitem>
                                <listitem>
                                    <para>The value in the cell immediately diagonally above to the
                                        left plus the match or mismatch score, depending on whether
                                        the intersecting sequence items constitute a match or a
                                        mismatch.</para>
                                </listitem>
                            </itemizedlist> For example, the first cell is the intersection of the
                                <quote>k</quote> at the top with <quote>c</quote> at the left, which
                            is a mismatch, since they are different. The cell immediately above has
                            a value of <tag class="attvalue">-2</tag>, which, when augmented by the
                            gap score, yields a value of <tag class="attvalue">-4</tag>. The same is
                            true of the cell immediately to the left. The cell diagonally above and
                            to the left has a value of <tag class="attvalue">0</tag>, which, when
                            combined with the mismatch score, yields a value of <tag
                                class="attvalue">-1</tag>. Since that is the highest value, write it
                            into the cell. Proceed across the first row, then traverse the second
                            row from left to right, etc., ending in the lower right. The completed
                            grid should look like:<table>
                                <title>Completed grid for Needleman Wunsch</title>
                                <tgroup cols="7">
                                    <tbody>
                                        <row>
                                            <entry/>
                                            <entry/>
                                            <entry align="center">k</entry>
                                            <entry align="center">o</entry>
                                            <entry align="center">a</entry>
                                            <entry align="center">l</entry>
                                            <entry align="center">a</entry>
                                        </row>
                                        <row>
                                            <entry/>
                                            <entry align="right">0</entry>
                                            <entry align="right">-2</entry>
                                            <entry align="right">-4</entry>
                                            <entry align="right">-6</entry>
                                            <entry align="right">-8</entry>
                                            <entry align="right">-10</entry>
                                        </row>
                                        <row>
                                            <entry>c</entry>
                                            <entry align="right">-2</entry>
                                            <entry align="right">-1</entry>
                                            <entry align="right">-3</entry>
                                            <entry align="right">-5</entry>
                                            <entry align="right">-7</entry>
                                            <entry align="right">-9</entry>
                                        </row>
                                        <row>
                                            <entry>o</entry>
                                            <entry align="right">-4</entry>
                                            <entry align="right">-3</entry>
                                            <entry align="right">0</entry>
                                            <entry align="right">-2</entry>
                                            <entry align="right">-4</entry>
                                            <entry align="right">-6</entry>
                                        </row>
                                        <row>
                                            <entry>l</entry>
                                            <entry align="right">-6</entry>
                                            <entry align="right">-5</entry>
                                            <entry align="right">-2</entry>
                                            <entry align="right">-1</entry>
                                            <entry align="right">-1</entry>
                                            <entry align="right">-3</entry>
                                        </row>
                                        <row>
                                            <entry>a</entry>
                                            <entry align="right">-8</entry>
                                            <entry align="right">-7</entry>
                                            <entry align="right">-4</entry>
                                            <entry align="right">-1</entry>
                                            <entry align="right">-2</entry>
                                            <entry align="right">0</entry>
                                        </row>
                                    </tbody>
                                </tgroup>
                            </table> We fill the cells in the specified order because each cell
                            depends on two values from the row above (the cell immediately above and
                            the one diagonally above and to the left) and the preceding cell of the
                            same row. Filling in the cells from left to right and top to bottom
                            ensures that these values will be available when needed. For reasons
                            discussed below, these ordering dependencies pose a challenge for an
                            XSLT implementation.</para>
                    </listitem>
                    <listitem>
                        <para>Starting in the lower right corner, trace back through the sources
                            that determined the score of each cell. For example, the <tag
                                class="attvalue">0</tag> value in the lower right inherited from the
                            upper diagonal left because the <tag class="attvalue">-1</tag> that was
                            there plus the match score of <tag class="attvalue">1</tag> yielded a
                                <tag class="attvalue">0</tag>, and that value was higher than the
                            scores coming from the cell immediately above (<tag class="attvalue"
                                >-3</tag> plus the gap score of <tag class="attvalue">-2</tag>
                            yields <tag class="attvalue">-5</tag>) or to immediately to the left
                                (<tag class="attvalue">-2</tag> plus the gap score of <tag
                                class="attvalue">-2</tag> yields <tag class="attvalue">-4</tag>). In
                            the following image we have 1) added arrows indicating the source of
                            each value entered into the grid and 2) shaded match cells green and
                            mismatch cells pink: <figure>
                                <title>Completed alignment grid</title>
                                <mediaobject>
                                    <imageobject>
                                        <imagedata fileref="images/completed_grid.png" format="PNG"
                                        />
                                    </imageobject>
                                </mediaobject>
                            </figure></para>
                    </listitem>
                    <listitem>
                        <para>At each step along this traceback path, starting from the lower right,
                            if the step is diagonal and up, align one item from the end of each
                            sequence. If the step is to the left, align an item from the sequence at
                            the top with a gap (that is, do not select an item from the sequence at
                            the left). If the step is up, align an item from the sequence at the
                            left with a gap. In case of ties, the choices with the highest value are
                            all optimal and can be pursued as alternatives. In the present case,
                            this process produces the following single optimal alignment: <figure>
                                <title>Alignment table</title>
                                <mediaobject>
                                    <imageobject>
                                        <imagedata fileref="images/completed_alignment.png"
                                            format="PNG"/>
                                    </imageobject>
                                </mediaobject>
                            </figure></para>
                    </listitem>
                </orderedlist></para>
        </section>
    </section>
    <section>
        <title>The challenges of dynamic programming and XSLT</title>
        <para>XSLT, at least before version 3.0, plays poorly with dynamic programming because each
            step in a dynamic programming algorithm depends on values calculated at preceding steps.
            Functional programming of the sort supported by XSLT <tag>&lt;xsl:for-each&gt;</tag>
            does not have access to these incremental values; if we try to run
                <tag>&lt;xsl:for-each&gt;</tag> over all of the cells and populate them according to
            the values before and above them, those neighboring values will be the values in place
            initially, that is, null. The reason is that <tag>&lt;xsl:for-each&gt;</tag> is not an
            iterative instruction: it <emphasis>orders the output</emphasis> according to the input
            sequence, but it does not necessarily <emphasis>perform the computation</emphasis> in
            that order. This is a feature because it means that such instructions can be
            parallelized, since no step is dependent on the output of any other step. But it also
            means that populating the Needleman Wunsch grid in XSLT requires an alternative to
                <tag>&lt;xsl:for-each&gt;</tag>.</para>
        <para>Tennison draws our attention to this issue in her XSLT 2.0 implementations of a
            dynamic programming algorithm to calculate Levenshtein distance (<xref
                linkend="tennison_2007a"/>, <xref linkend="tennison_2007b"/>), and with respect to
            constructing the grid, the algorithms for Levenshtein and Needleman Wunsch are
            analogous. The principal difference is that Levenshtein cares only about the value of
            the lower right cell, and therefore does not require the traceback steps that Needleman
            Wunsch uses to perform the alignment of actual sequence items.</para>
        <section>
            <title>Why recursion breaks</title>
            <para>The traditional way to mimic updating a variable incrementally in XSLT is with
                recursion, cycling the newly updated value into each recursive call. The challenge
                to this approach is that deep recursion can consume enough memory to overflow the
                available stack space and crash the operation. XSLT processors can work around this
                limitation with <emphasis>tail recursion optimization</emphasis>, which enables the
                processor to reduce the consumption of stack space by recognizing when stack values
                do not have to be preserved. Tail recursion is finicky, however, first because not
                all processors support it, second because functions have to be written in a
                particular way to make it possible, and third because some operations that can be
                understood as tail recursive may not look that way to the processor, and may
                therefore fail to be optimized.</para>
            <para>The important insight with respect to recursion in Tennison’s second engagement
                with the Levenshtein problem (<xref linkend="tennison_2007b"/>) is that it is
                possible to construct the grid values for Levenshtein (and therefore also for
                Needleman Wunsch) without recurring on every cell. By writing values into the grid
                on the diagonal, instead of across each row in turn, as is traditional, Tennison is
                able to calculate all values on an individual diagonal at the same time, since the
                cells on diagonals that run from top right to bottom left have no mutual dependencies.<footnote>
                    <para>Not only are there no mutual dependencies within a diagonal, but all of
                        the information needed to process an entire diagonal is available
                        simultaneously from only the two preceding diagonals, without any dependency
                        on earlier ones. This property contributes to the scalability of our
                        implementation in ways that will be discussed below.</para>
                </footnote> The absence of dependencies within a diagonal means that Tennison can
                use <tag>&lt;xsl:for-each&gt;</tag>, instead of recursion, to compute all of the
                values on each diagonal, and recur only as she moves to a new diagonal. The
                computational complexity of populating the grid remains <emphasis>O(mn)</emphasis>
                (that is, essentially quadratic), since it is still necessary to calculate values
                for each cell individually, and number of cells is the product of the lengths of the
                two sequences, but Tennison’s implementation reduces the recursion from the number
                of cells to the number of diagonals, which is <emphasis>n + m - 1</emphasis>, that
                is, linear with respect to the total number of items in the two sequences. This
                implementation also reduces the storage complexity; because each diagonal depends
                only on the two immediately preceding ones, the recursive steps do not have to pass
                forward the entire state of the grid. The substantial improvement in computational
                efficiency that results from an implementation <quote>on the diagonal</quote> was
                identified initially by <xref linkend="wang_2002"/> (8) and then explored further by
                    <xref linkend="naveed_2005"/> (3–4), but although Wang first reported that items
                on the diagonal could be processed in parallel, it was Tennison who recognized that
                this observation could also be used to reduce the depth of recursion in XSLT.</para>
        </section>
        <section>
            <title>Iteration to the rescue</title>
            <para>Tennison’s diagonal implementation reduces the depth of recursion, but does not
                eliminate recursion entirely: because the values in each diagonal continue to depend
                on the values in the two immediately preceding diagonals, it nonetheless requires
                recursion on each new diagonal. The reduction in the depth of recursion from
                quadratic to linear scales impressively; for example, with two 20-item sequences and
                400 cells, the traditional method would have recurred 400 times, while the diagonal
                method makes only 39 function calls. In XSLT 3.0, however, it is possible to use
                    <tag>&lt;xsl:iterate&gt;</tag> to avoid recursive coding entirely:<blockquote>
                    <para>[xsl:iterate] is similar to xsl:for-each, except that the items in the
                        input sequence are processed sequentially, and after processing each item in
                        the input sequence it is possible to set parameters for use in the next
                        iteration. It can therefore be used to solve problems that in XSLT 2.0
                        require recursive functions or templates. (<xref linkend="saxon_iterate"
                        />)</para>
                </blockquote> The use of <tag>&lt;xsl:iterate&gt;</tag>, which was not part of the
                XSLT 2.0 that was available to Tennison in 2007, in place of the recursion that she
                was forced to retain thus observes her wise recommendation to <quote>try to iterate
                    rather than recurse whenever you can</quote> (<xref linkend="tennison_2007b"/>).
            </para>
        </section>
        <section>
            <title>Processing the diagonal</title>
            <para>The classic description of Needleman Wunsch differs from Levenshtein by requiring
                that the entire grid be available at the end of its construction so that it can be
                traversed backwards to perform the actual item alignment (Levenshtein cares only
                about the final value), but the two algorithms agree in the fact that cells on each
                consecutive diagonal can be constructed using information from only the two
                immediately preceding diagonals. Within our <code>&lt;xsl:iterate&gt;</code>
                instruction we return these two preceding diagonals as parameters called
                    <code>$ult</code> (immediately preceding) and <code>$penult</code> (preceding
                    <code>$ult</code>), promoting the previous <code>$ult</code> to the new
                    <code>$penult</code> on each iteration and adding the current diagonal as the
                new <code>$ult</code>. We improve the retrieval of these preceding cells while
                computing new values by using <tag>&lt;xsl:key&gt;</tag> with a composite <tag
                    class="attribute">@use</tag> attribute that indexes the two diagonals that
                constitute the search space according to the <tag class="attribute">@row</tag> and
                    <tag class="attribute">@col</tag> attribute values of each cell. At a minimum,
                each new cell holds information, in attributes, about its row, column, and score
                (all used to compute the values of subsequent cells) and the prior cell that was
                used to determine that score (diagonal, up, or left; used for the backward tracing
                of the path once construction has been completed); we also store some additional
                values, which we discuss below.</para>
            <para>It is possible for more than one neighboring cell to tie for highest value, and
                because the task that motivated this development required only
                    <emphasis>an</emphasis> optimal alignment, and not <emphasis>all</emphasis> such
                alignments, we record only one optimal path to each cell, resolving ties by
                arbitrarily favoring diagonal, then left, and only then upper sources. There is,
                however, nothing about the method that would prohibit recording and later processing
                multiple paths, and thus identifying all optimal alignments.</para>
            <para>In the Needleman Wunsch (and also Levenshtein) context, as <xref
                    linkend="wang_2002"/> and <xref linkend="naveed_2005"/> point out, all values on
                the same diagonal can be calculated in parallel, and Tennison’s use of
                    <tag>&lt;xsl:for-each&gt;</tag> in her improved code, in <xref
                    linkend="tennison_2007b"/>, to process the diagonal is compatible with this
                observation because <tag>&lt;xsl:for-each&gt;</tag> can be parallelized. Whether it
                    <emphasis>is</emphasis> executed in parallel, however, is often unpredictable,
                since standard XSLT 3.0 does not give the programmer explicit control over processes
                or threads in the same way as other languages (cf. Python’s
                    <code>multiprocessing</code> module). However, <application>Saxon
                    EE</application> (although not <application>PE</application> or
                    <application>HE</application>) provides a custom <tag class="attribute"
                    >@saxon:threads</tag> attribute that allows the developer to specify that an
                    <tag>&lt;xsl:for-each&gt;</tag> element should be processed in parallel. The
                documentation explains that: <blockquote>
                    <para>This attribute may be set on the xsl:for-each instruction. The value must
                        be an integer. When this attribute is used with Saxon-EE, the items selected
                        by the select expression of the instruction are processed in parallel, using
                        the specified number of threads. (<xref linkend="saxon_threads"/>)</para>
                </blockquote> The <application>Saxon</application> documentation adds, however,
                that: <blockquote>
                    <para>Processing using multiple threads can take advantage of multi-core CPUs.
                        However, there is an overhead, in that the results of processing each item
                        in the input need to be buffered. The overhead of coordinating multiple
                        threads is proportionally higher if the per-item processing cost is low,
                        while the overhead of buffering is proportionally higher if the amount of
                        data produced when each item is processed is high. Multi-threading therefore
                        works best when the body of the xsl:for-each instruction performs a large
                        amount of computation but produces a small amount of output. (<xref
                            linkend="saxon_threads"/>)</para>
                </blockquote></para>
        </section>
        <section>
            <title>Save yourself a trip … and some space</title>
            <para>The process of constructing the scoring grid for Needleman Wunsch on the diagonal
                is identical to that of constructing the grid for Levenshtein, but, as was noted
                above, the key difference is what happens next: Levenshtein cares only about the
                value of the lower right cell, and therefore does not need to walk back through the
                grid the way Needleman Wunsch does to align the actual sequences. This means that a
                diagonal implementation for a Levenshtein distance calculation can throw away each
                diagonal once it is no longer needed, and the one-cell diagonal at the lower right
                will contain the one piece of information the function is expected to return: the
                distance between the two sequences. An implementation of Needleman Wunsch according
                to the classic description of the method, however, cannot economize on space in this
                way, which means that although Needleman Wunsch and Levenshtein have comparable
                    <emphasis>computational</emphasis> complexity, classic Needleman Wunsch has
                quadratic <emphasis>storage</emphasis> complexity because it preserves and passes
                along the entire grid, while Tennison’s diagonal Levenshtein implementation has
                linear storage complexity because it throws away diagonals as soon as it no longer
                needs them.</para>
            <para>The storage requirements of Needleman Wunsch are quadratic, however, only as long
                as the entire grid must be preserved for backward traversal at the end of the
                construction process, and the only information needed for that traversal is the
                direction (diagonal, left, up) of the optimal path steps. At each step along that
                traversal we do not need to know the score and we do not need the row and column
                labels. This means that we can avoid the backward traversal of the grid entirely if
                we write the cumulative full path to each cell into the cell alongside its score,
                instead just the source of the most recent path step, so that the lower right cell
                will already contain information about the full path that led to it. We can then use
                those directional path steps to construct an alignment table on the basis of the
                original sequences, without further reference to the grid. Avoiding the backwards
                trip through the grid comes at the cost of writing full path information into every
                cell during the construction of the grid, which entails extra computation and
                storage, even though we will ultimately use this information only from the one lower
                right cell for the final traversal. In compensation for storing that additional
                information in the cells, though, we no longer need to pass the entire cumulative
                grid through the iterations, so the additional paths must be stored only for the
                three-diagonal life cycle of each cell.</para>
        </section>
        <section>
            <title>Optimizations</title>
            <para>We implemented the method described above using vanilla XSLT 3.0 of the sort that
                can be executed in <application>Saxon HE</application> without using any proprietary
                extensions. As a small optimization, because each cell is used an average of three
                times to compute new cell values (once each as diagonal, left, and upper), and the
                left and upper behaviors are the same (sum the score of the cell and the gap
                penalty), we perform that sum operation just once and store it when the cell is
                created, instead of computing it twice on the two times when it is used. </para>
            <para>We then revised the code for <application>Saxon EE</application> with two further
                optimizations: <itemizedlist>
                    <listitem>
                        <para>We use the <tag class="attribute">@saxon:threads</tag> attribute with
                            a somewhat arbitrary value of <tag class="attvalue">10</tag> on our <tag
                                class="element">xsl:for-each</tag> elements. This ensures that the
                            body of the <tag class="element">xsl:for-each</tag> element will be
                            parallelized (although regardless of the value of the <tag
                                class="attribute">@saxon:threads</tag> attribute, the number of
                            computations that can actually be performed simultaneously depends on
                            the number of cores provided by the CPU and on other demands on CPU
                            resources).</para>
                    </listitem>
                    <listitem>
                        <para>We used schema-aware processing with type annotations (using the <tag
                                class="attribute">@type</tag> attribute) on the <tag class="element"
                                >&lt;cell&gt;</tag> attributes that were used in computation, which
                            means principally the <tag class="attribute">@row</tag> and <tag
                                class="attribute">@col</tag> (column) attributes, which we typed as
                                <tag class="attvalue">xs:integer</tag>. By default attributes on
                            constructed elements that do not undergo validation are typed as <tag
                                class="attvalue">xs:untypedAtomic</tag>, and without our explicit
                            typing we would have had to convert them explicitly to numerical values
                            whenever we needed to perform arithmetic on them. Typing them as they
                            are created and preserving the typing removes the need to cast them
                            explicitly as numbers later.</para>
                    </listitem>
                </itemizedlist></para>
        </section>
    </section>
    <section>
        <title>Conclusions</title>
        <para>The code that implements our method is available at <link
                xl:href="https://github.com/djbpitt/xstuff/tree/master/nw"/>, and has not been
            reproduced here. It is densely commented, and thus offers tutorial information about the
            method. Small exploratory stylesheets that were used to develop individual components of
            the code have been retained in a <emphasis>scratch</emphasis> subdirectory.</para>
        <para>Tennison concludes her second, improved computation of Levenshtein distance by writing
            that:</para>
        <para><blockquote>
                <para>I guess the take-home messages are: (a) try to iterate rather than recurse
                    whenever you can and (b) don’t blindly adapt algorithms designed for procedural
                    programming languages to XSLT. [<xref linkend="tennison_2007b"/>]</para>
            </blockquote></para>
        <para>The XSLT 3.0 <tag>&lt;xsl:iterate&gt;</tag> element provides a robust method to
            iterate reliably that was not available to Tennison in 2007. Beyond that, we extend
            Tennison’s XSLT-idiomatic implementation of a Levenshtein distance algorithm to the
            closely related domain of Needleman Wunsch sequence alignment, with attention to the
            additional step of traversing the optimal path to construct the actual alignment.
        </para>
    </section>
    <bibliography>
        <title>Works cited</title>
        <bibliomixed xml:id="bellman_1952" xreflabel="Bellman 1952">Bellman, Richard E. 1952.
                <quote>On the theory of dynamic programming.</quote>
            <citetitle>Proceedings of the National Academy of Sciences</citetitle> 38(8):716–19.
                <link xl:href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1063639/"
            /></bibliomixed>
        <bibliomixed xml:id="bellman_1954" xreflabel="Bellman 1954">Bellman, Richard E. <quote>The
                theory of dynamic programming.</quote> Technical report P-550. Santa Monica: Rand
            Corporation. <link xl:href="http://smo.sogang.ac.kr/doc/bellman.pdf"/></bibliomixed>
        <bibliomixed xml:id="boes_2014" xreflabel="Boes 2014">Boes, Olivier. 2014. <quote>Improving
                the Needleman-Wunsch algorithm with the DynaMine predictor.</quote> Master in
            Bioinformatics thesis, Université libre de Bruxelles. <link xl:href="http://t.ly/rzxZZ"
            /></bibliomixed>
        <bibliomixed xml:id="collatex" xreflabel="CollateX">CollateX—software for collating textual
            sources. <link xl:href="https://collatex.net/"/></bibliomixed>
        <bibliomixed xml:id="fv_reader" xreflabel="Frankenstein variorum reader"><quote>Mary
                Shelley’s Frankenstein. A digital variorum edition.</quote>
            <link xl:href="http://frankensteinvariorum.library.cmu.edu/viewer/"/>. See also the
            project GitHub repo at <link xl:href="https://github.com/FrankensteinVariorum/"
            />.</bibliomixed>
        <bibliomixed xml:id="snip" xreflabel="Global alignment"><quote>Global alignment.
                Needleman-Wunsch.</quote> Chapter 9 of Pairwise alignment, Bioinformatics Lessons at
            your convenience, Snipacademy. <link
                xl:href="https://binf.snipcademy.com/lessons/pairwise-alignment/global-needleman-wunsch"
            /></bibliomixed>
        <bibliomixed xml:id="gothenburg" xreflabel="Gothenburg model"><quote>The Gothenburg
                model.</quote> Section 1 of the documentation for <xref linkend="collatex"/>. <link
                xl:href="https://collatex.net/doc/#gothenburg-model"/></bibliomixed>
        <bibliomixed xml:id="gotoh_1982" xreflabel="Gotoh 1982">Gotoh, Osamu. 1982. <quote>An
                improved algorithm for matching biological sequences.</quote>
            <citetitle>Journal of molecular biology</citetitle> 162(3):705–08. <link
                xl:href="http://www.genome.ist.i.kyoto-u.ac.jp/~aln_user/archive/JMB82.pdf"
            /></bibliomixed>
        <bibliomixed xml:id="grimson" xreflabel="Grimson and Guttag">Grimson, Eric and John Guttag.
                <quote>Dynamic programming: overlapping subproblems, optimal substructure.</quote>
            Part 13 of <citetitle>Introduction to computer science and programming</citetitle>,
            Massachusetts Institute of Technology, MIT Open Courseware. <link
                xl:href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-13/"
            />
        </bibliomixed>
        <bibliomixed xml:id="intertextual_dante" xreflabel="Intertextual Dante">
            <quote>Intertextual Dante.</quote>
            <link xl:href="https://digitaldante.columbia.edu/intertexual-dante-vanpeteghem/"/>
        </bibliomixed>
        <bibliomixed xml:id="juxta" xreflabel="Juxta">Juxta. <link
                xl:href="https://www.juxtasoftware.org/"/></bibliomixed>
        <bibliomixed xml:id="msa" xreflabel="Multiple sequence alignment (Wikipedia)">Multiple
            sequence alignment (Wikipedia). Accessed 2019-11-03. <link
                xl:href="https://en.wikipedia.org/wiki/Multiple_sequence_alignment"/></bibliomixed>
        <bibliomixed xml:id="naveed_2005" xreflabel="Naveed et al, 2005">Naveed, Tahir,Imitaz Saeed
            Siddiqui, Shaftab Ahmed. 2005. <quote>Parallel Needleman-Wunsch algorithm for
                grid.</quote> Proceedings of the PAK-US International Symposium on High Capacity
            Optical Networks and Enabling Technologies (HONET 2005), Islamabad, Pakistan, Dec 19–21,
            2005. <link
                xl:href="https://upload.wikimedia.org/wikipedia/en/c/c4/ParallelNeedlemanAlgorithm.pdf"
            /></bibliomixed>
        <bibliomixed xml:id="needleman_1970" xreflabel="Needleman and Wunsch 1970">Needleman, Saul
            B. and Christian D. Wunsch. 1970. <quote>A general method applicable to the search for
                similarities in the amino acid sequence of two proteins.</quote>
            <citetitle>Journal of molecular biology</citetitle> 48 (3): 443–53.
            doi:10.1016/0022-2836(70)90057-4.</bibliomixed>
        <!--<bibliomixed xml:id="sankoff_1972" xreflabel="Sankoff 1972">Sankoff David. 1972.
                <quote>Matching sequences under deletion/insertion constraints.</quote>
            <citetitle>Proceedings of the National Academy of Sciences of the USA</citetitle> 69
            (1): 4–6. doi:10.1073/pnas.69.1.4. <link
                xl:href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC427531/pdf/pnas00127-0010.pdf"
            /></bibliomixed>-->
        <!--<bibliomixed xml:id="saxon_for-each" xreflabel="Saxon xsl:for-each">Saxon documentation of
                <emphasis>xsl:for-each</emphasis>. <link
                xl:href="https://www.saxonica.com/html/documentation/xsl-elements/for-each.html"
            /></bibliomixed>-->
        <bibliomixed xml:id="saxon_threads" xreflabel="Saxon saxon:threads">Saxon documentation of
                <emphasis>saxon:threads</emphasis>. <link
                xl:href="https://www.saxonica.com/html/documentation/extensions/attributes/threads.html"
            /></bibliomixed>
        <bibliomixed xml:id="saxon_iterate" xreflabel="Saxon xsl:iterate">Saxon documentation of
                <emphasis>xsl:iterate</emphasis>. <link
                xl:href="http://www.saxonica.com/documentation/index.html#!xsl-elements/iterate"
            /></bibliomixed>
        <bibliomixed xml:id="sellers_1974" xreflabel="Sellers 1974">Sellers, Peter H. 1974.
                <quote>On the theory and computation of evolutionary distances.</quote>
            <citetitle>SIAM journal on applied mathematics</citetitle> 26(4):787–93.</bibliomixed>
        <bibliomixed xml:id="smith_1981" xreflabel="Smith et al. 1981">Smith, Temple F., Michael S.
            Waterman, and Walter M. Fitch. 1981. <quote>Comparative biosequence metrics.</quote>
            <citetitle>Journal of molecular evolution</citetitle>, 18(1):38–46. <link
                xl:href="https://www.researchgate.net/publication/15863628_Comparative_biosequence_metrics"
            /></bibliomixed>
        <bibliomixed xml:id="tennison_2007a" xreflabel="Tennison 2007a">Tennison, Jeni. 2007.
                <quote>Levenshtein distance in XSLT 2.0.</quote> Posted to <citetitle>Jeni’s
                musings</citetitle>, 2007-05-03. <link
                xl:href="https://www.jenitennison.com/2007/05/06/levenshtein-distance-on-the-diagonal.html"
            /></bibliomixed>
        <bibliomixed xml:id="tennison_2007b" xreflabel="Tennison 2007b">Tennison, Jeni. 2007.
                <quote>Levenshtein distance on the diagonal.</quote> Posted to <citetitle>Jeni’s
                musings</citetitle>, 2007-05-06. <link
                xl:href="https://www.jenitennison.com/2007/05/06/levenshtein-distance-on-the-diagonal.html"
            /></bibliomixed>
        <bibliomixed xml:id="trovato_2014" xreflabel="Trovato 2014">Trovato, Paolo.
                <citetitle>Everything you always wanted to know about Lachmann’s method. A
                non-standard handbook of genealogical textual criticism in the age of
                post-structuralism, cladistics, and copy-text.</citetitle> Padova:
            libreriauniversitaria.it , 2014</bibliomixed>
        <bibliomixed xml:id="peteghhem_2015" xreflabel="Van Peteghem 2015">Van Peteghem, Julie.
            2015. <quote>Digital readers of allusive texts: Ovidian intertextuality in the Commedia
                and the Digital concordance on intertextual Dante.</quote>
            <citetitle>Humanist studies &amp; the digital age</citetitle>, 4.1, 39–59. DOI:
            10.5399/uo/hsda.4.1.3584. <link
                xl:href="http://journals.oregondigital.org/index.php/hsda/article/view/3584"
            /></bibliomixed>
        <bibliomixed xml:id="vintsyuk_1968" xreflabel="Vintsyuk 1968">Vintsyuk, T[aras] K[lymovych].
            1968. <quote>Speech discrimination by dynamic programming.</quote>
            <citetitle>Cybernetics</citetitle> 4(1):52–57.</bibliomixed>
        <bibliomixed xml:id="wang_2002" xreflabel="Wang 2002">Wang, Bin. 2002. <quote>Implementation
                of a dynamic programming algorithm for DNA sequence alignment on the cell matrix
                architecture. MA thesis, Utah State University.</quote>
            <link xl:href="https://www.cellmatrix.com/entryway/products/pub/wang2002.pdf"
            /></bibliomixed>
    </bibliography>
</article>
